const fs = require('fs');

console.log('üîÑ Conversion finale MySQL ‚Üí PostgreSQL\n');

// Lire le fichier MySQL
console.log('üìñ Lecture du dump MySQL...');
let sql = fs.readFileSync('demo-mysql_nursecare.sql', 'utf8');
console.log('‚úÖ Fichier lu\n');

// 1. Supprimer les commentaires et directives MySQL
console.log('üßπ Nettoyage...');
sql = sql.replace(/\/\*!.*?\*\/;?/gs, '');
sql = sql.replace(/--[^\n]*\n/g, '');
sql = sql.replace(/SET SQL_MODE.*?;/g, '');
sql = sql.replace(/START TRANSACTION;/g, '');
sql = sql.replace(/COMMIT;/g, '');
sql = sql.replace(/SET time_zone.*?;/g, '');
sql = sql.replace(/SET NAMES.*?;/g, '');
sql = sql.replace(/SET character_set_client.*?;/g, '');
console.log('‚úÖ Nettoy√©\n');

// 2. Remplacer les backticks AVANT tout traitement
console.log('‚úèÔ∏è  Remplacement des backticks...');
sql = sql.replace(/`/g, '"');
console.log('‚úÖ Backticks remplac√©s\n');

// 3. G√©rer les ENUM - extraire et remplacer
console.log('üîß Traitement des ENUMs...');
const enumPatterns = [];
sql = sql.replace(/enum\(([^)]+)\)/gi, (match, values) => {
  // Garder la liste des valeurs pour cr√©er un type custom plus tard
  const enumValues = values.split(',').map(v => v.trim().replace(/'/g, ''));
  enumPatterns.push(enumValues);
  // Pour l'instant, on remplace par VARCHAR
  return 'VARCHAR(50)';
});
console.log(`‚úÖ ${enumPatterns.length} ENUMs convertis en VARCHAR\n`);

// 4. Remplacer les types de donn√©es
console.log('üîß Conversion des types...');
sql = sql.replace(/\bint\(\d+\)/gi, 'INTEGER');
sql = sql.replace(/\btinyint\s*\(\s*1\s*\)/gi, 'BOOLEAN');
sql = sql.replace(/\btinyint\s*\(\s*\d+\s*\)/gi, 'SMALLINT');
sql = sql.replace(/\bdatetime\b/gi, 'TIMESTAMP');
sql = sql.replace(/current_timestamp\s*\(\s*\)/gi, 'CURRENT_TIMESTAMP');
console.log('‚úÖ Types convertis\n');

// 5. Supprimer ON UPDATE CURRENT_TIMESTAMP (non support√© par PostgreSQL)
console.log('üóëÔ∏è  Suppression de ON UPDATE...');
sql = sql.replace(/\s+ON UPDATE CURRENT_TIMESTAMP/gi, '');
console.log('‚úÖ ON UPDATE supprim√©\n');

// 6. G√©rer AUTO_INCREMENT
console.log('üîë Traitement AUTO_INCREMENT...');
// Trouver les colonnes avec AUTO_INCREMENT et les convertir en SERIAL
sql = sql.replace(/\"(\w+)\"\s+INTEGER\s+NOT NULL\s+AUTO_INCREMENT/gi, '"$1" SERIAL PRIMARY KEY');
sql = sql.replace(/\"(\w+)\"\s+INTEGER\s+AUTO_INCREMENT/gi, '"$1" SERIAL PRIMARY KEY');
// Supprimer les AUTO_INCREMENT restants
sql = sql.replace(/\s*AUTO_INCREMENT\s*/gi, ' ');
console.log('‚úÖ AUTO_INCREMENT trait√©\n');

// 7. Supprimer les clauses MySQL sp√©cifiques
console.log('üóëÔ∏è  Suppression des clauses MySQL...');
sql = sql.replace(/\s*ENGINE\s*=\s*\w+/gi, '');
sql = sql.replace(/\s*DEFAULT\s+CHARSET\s*=\s*\w+/gi, '');
sql = sql.replace(/\s*COLLATE\s*=\s*\w+/gi, '');
sql = sql.replace(/\s*AUTO_INCREMENT\s*=\s*\d+/gi, '');
console.log('‚úÖ Clauses supprim√©es\n');

// 8. Nettoyer les KEY et INDEX
console.log('üî® Nettoyage des INDEX...');
sql = sql.replace(/,\s*PRIMARY\s+KEY\s+\([^)]+\)/gi, ''); // On les a d√©j√† avec SERIAL
sql = sql.replace(/,\s*KEY\s+"[^"]+"\s*\([^)]+\)/gi, '');
sql = sql.replace(/,\s*UNIQUE\s+KEY\s+"[^"]+"\s*\([^)]+\)/gi, '');
sql = sql.replace(/,\s*CONSTRAINT\s+"[^"]+"\s+FOREIGN KEY[^;]+/gi, '');
sql = sql.replace(/,\s*,/g, ',');
sql = sql.replace(/,\s*\)/g, ')');
console.log('‚úÖ INDEX nettoy√©s\n');

// 9. Corriger les DEFAULT avec bool√©ens
console.log('‚úÖ Correction des DEFAULT bool√©ens...');
sql = sql.replace(/DEFAULT\s+1/gi, 'DEFAULT TRUE');
sql = sql.replace(/DEFAULT\s+0/gi, 'DEFAULT FALSE');
console.log('‚úÖ DEFAULT corrig√©s\n');

// 10. NE PAS convertir les valeurs dans les INSERT
// PostgreSQL accepte 0/1 pour les bool√©ens, donc on garde tel quel

// 11. √âchapper les apostrophes
console.log('üìù √âchappement des apostrophes...');
sql = sql.replace(/\\'/g, "''");
console.log('‚úÖ Apostrophes √©chapp√©es\n');

// 12. Nettoyer les lignes vides
sql = sql.replace(/\n\n\n+/g, '\n\n');

// 13. Cr√©er l'en-t√™te
const pgHeader = `-- PostgreSQL dump converted from MySQL
-- Database: nursecare_db
-- Conversion date: ${new Date().toISOString()}

BEGIN;

-- D√©sactiver temporairement les contraintes
SET session_replication_role = 'replica';

`;

// 14. Cr√©er le pied de page
const pgFooter = `

-- R√©activer les contraintes
SET session_replication_role = 'origin';

COMMIT;
`;

sql = pgHeader + sql + pgFooter;

// Sauvegarder
console.log('üíæ Sauvegarde...');
fs.writeFileSync('postgres_final.sql', sql, 'utf8');
console.log('‚úÖ Fichier sauvegard√©: postgres_final.sql\n');

console.log('‚ïê'.repeat(60));
console.log('üéâ Conversion termin√©e!');
console.log('‚ïê'.repeat(60));
console.log('\nüìã Fichier pr√™t pour l\'import PostgreSQL\n');
